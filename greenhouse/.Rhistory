#if (sum(sub$Silique_number, na.rm=T)>=1) {
# Empty$Failed_silique_number[target_row]<-max(sub$Silique_number, na.rm=T)-sum(sub$Number_collected_siliques, na.rm=T)
##If the number of failed siliques is negative, set to zero
#if(Empty$Failed_silique_number[target_row]<0) {
# Empty$Failed_silique_number[target_row]<-0
#Mature_length_siliques - note that the column numbers have to be updated
Empty$Mature_length_siliques_2021[target_row]<-sum(sub[,c(
34,
36
)], na.rm=T)
} #closes inner if statement
estess<-read.csv("inam_Estess2021_09Jul24.csv", header=T)
sapply(estess,class)
head(estess,20)
tail(estess)
estess$Master_notes<-as.character(estess$Master_notes)
estess$Flower_number <as.integer(estess$Flower_number)
reproductive<-subset(estess, State=="Reproductive")
head(reproductive,20)
tail(reproductive,20)
##The loop begins -
for (i in 1:length(unique(estess$PlantID))){
##Subset the data for plantID i
target_ID<-unique(estess$PlantID)[i]
sub<-subset(estess, PlantID==target_ID)
##Identify the row number in Empty that corresponds to this ID number
target_row<-as.numeric(rownames(Empty[which(Empty$PlantID==target_ID),]))
#overwinter_survival - Census 1 was the first full census, alive=1 dead=0
ifelse((sub$Status[1]=="Alive"), Empty$Overwinter_survival_2021[target_row]<-1, Empty$Overwinter_survival_2021[target_row]<-0)
#season_survival - Census 11 was the last full census, alive=1 dead=0
ifelse((sub$Status[13]=="Alive"), Empty$Season_survival_2021[target_row]<-1, Empty$Season_survival_2021[target_row]<-0)
#season_Include - Census 10 was the last full census, alive=1 dead=0
#ifelse((sub$Include[10]=="Alive"), Empty$Season_survival_2021[target_row]<-1, Empty$Season_survival_2021[target_row]<-0)
Empty$Exclude_2021[target_row]<-sub$Include[13]
#error here
##In some cases, plants initially marked as dead are later found alive - we need to adjust Overwinter_survival to equal 1 if plants were alive in the final census
if(Empty$Season_survival_2021[target_row]==1) {
Empty$Overwinter_survival_2021[target_row]<-1
}
# leaf damage
Empty$num_total1_2021[target_row]<-sub$num_total_[1]
Empty$num_damaged1_2021[target_row]<-sub$num_damaged_[1]
Empty$total_damage1_2021[target_row]<-sub$total_damage_[1]
Empty$avg_damage1_2021[target_row]<-sub$avg_damage_[1]
Empty$LAR_1_2021[target_row]<-sub$LAR[1]
Empty$num_total2_2021[target_row]<-sub$num_total_[2]
Empty$num_damaged2_2021[target_row]<-sub$num_damaged_[2]
Empty$total_damage2_2021[target_row]<-sub$total_damage_[2]
Empty$avg_damage2_2021[target_row]<-sub$avg_damage_[2]
Empty$LAR_2_2021[target_row]<-sub$LAR[2]
Empty$num_total3_2021[target_row]<-sub$num_total_[3]
Empty$num_damaged3_2021[target_row]<-sub$num_damaged_[3]
Empty$total_damage3_2021[target_row]<-sub$total_damage_[3]
Empty$avg_damage3_2021[target_row]<-sub$avg_damage_[3]
Empty$LAR_3_2021[target_row]<-sub$LAR[3]
Empty$num_total4_2021[target_row]<-sub$num_total_[4]
Empty$num_damaged4_2021[target_row]<-sub$num_damaged_[4]
Empty$total_damage4_2021[target_row]<-sub$total_damage_[4]
Empty$avg_damage4_2021[target_row]<-sub$avg_damage_[4]
Empty$LAR_4_2021[target_row]<-sub$LAR[4]
Empty$num_total5_2021[target_row]<-sub$num_total_[5]
Empty$num_damaged5_2021[target_row]<-sub$num_damaged_[5]
Empty$total_damage5_2021[target_row]<-sub$total_damage_[5]
Empty$avg_damage5_2021[target_row]<-sub$avg_damage_[5]
Empty$LAR_5_2021[target_row]<-sub$LAR[5]
Empty$num_total6_2021[target_row]<-sub$num_total_[6]
Empty$num_damaged6_2021[target_row]<-sub$num_damaged_[6]
Empty$total_damage6_2021[target_row]<-sub$total_damage_[6]
Empty$avg_damage6_2021[target_row]<-sub$avg_damage_[6]
Empty$LAR_6_2021[target_row]<-sub$LAR[6]
Empty$num_total7_2021[target_row]<-sub$num_total_[7]
Empty$num_damaged7_2021[target_row]<-sub$num_damaged_[7]
Empty$total_damage7_2021[target_row]<-sub$total_damage_[7]
Empty$avg_damage7_2021[target_row]<-sub$avg_damage_[7]
Empty$LAR_7_2021[target_row]<-sub$LAR[7]
Empty$num_total8_2021[target_row]<-sub$num_total_[8]
Empty$num_damaged8_2021[target_row]<-sub$num_damaged_[8]
Empty$total_damage8_2021[target_row]<-sub$total_damage_[8]
Empty$avg_damage8_2021[target_row]<-sub$avg_damage_[8]
Empty$LAR_8_2021[target_row]<-sub$LAR[8]
Empty$num_total9_2021[target_row]<-sub$num_total_[9]
Empty$num_damaged9_2021[target_row]<-sub$num_damaged_[9]
Empty$total_damage9_2021[target_row]<-sub$total_damage_[9]
Empty$avg_damage9_2021[target_row]<-sub$avg_damage_[9]
Empty$LAR_9_2021[target_row]<-sub$LAR[9]
Empty$num_total10_2021[target_row]<-sub$num_total_[10]
Empty$num_damaged10_2021[target_row]<-sub$num_damaged_[10]
Empty$total_damage10_2021[target_row]<-sub$total_damage_[10]
Empty$avg_damage10_2021[target_row]<-sub$avg_damage_[10]
Empty$LAR_10_2021[target_row]<-sub$LAR[10]
## Master notes
Empty$Master_notes_2021[target_row]<-sub$Master_notes[10]
#Date_first_death_observed - only assigns a date of first death for individuals who are not alive at the end of the season - This code does account for the individuals who were listed as dead, then were found as alive, and later died
if(Empty$Season_survival_2021[target_row]==0) { #Outer if statement
#Subset data where Status==Dead
First_death<-subset(sub, Status=="Dead")
#Extract row name of last census where status==Alive
Last_alive<-rownames(tail(sub[which(sub$Status=="Alive"),], n=1))
##Adjust First_death data set to include only data 	after the last Alive status was observed
if(length(Last_alive)>=1) { #Inner if statement
##Adjust subset of First_death
First_death<-subset(First_death, as.numeric(rownames(First_death))>as.numeric(Last_alive))
} #Closes inner if statement
##Assign the date of first death
Empty$Date_first_death_observed_2021[target_row]<-First_death$Ordinal_date[1]
} #Closes outer if statement
##Gopher damage or Censor - was coded as GopherDamage or Censor in the Exclude column - sometimes a plant marked as being exposed to gopher damage doesn't die - for that reason, this has to meet conditions that it was censused as gopher damaged at least once and that we didn't observe it as alive in the last census
#if(any(sub$Exclude[10]=="GopherDamage") & (sub$Status[10]!="Alive")) {
#  Empty$Exclude_2021[target_row]<-"GopherDamage"
#}
#if(any(sub$Exclude[10]=="Censor") & (sub$Status[10]!="Alive")) {
#  Empty$Exclude_2021[target_row]<-"Censor"
#}
#if(is.na(Empty$Exclude_2021[target_row])==T) {
#  Empty$Exclude_2021[target_row]<-"Include"
#}
##Date_first_gopher, again only noted if the plant was not marked as alive in the last census
##This code is a little crazy because we are also calculating the date a plant was last alive prior to gopher damage and whether the living plant died prior to gopher damage
#if(any(sub$Exclude[10]=="GopherDamage") & (sub$Status[10]!="Alive" )) {
#  Empty$Date_first_gopher_2021[target_row]<-sub$Ordinal_date[which(sub$Exclude=="GopherDamage")][1]
##Last date of being alive prior to gopher damage
#  Last_alive<-tail(sub$Ordinal_date[which(sub$Status=="Alive" & sub$Ordinal_date<Empty$Date_first_gopher_2021[target_row])], n=1)
#Last date of being dead prior to gopher damage
#  Last_dead<-tail(sub$Ordinal_date[which(sub$Status=="Dead" & sub$Ordinal_date<Empty$Date_first_gopher_2021[target_row])], n=1)
#If the plant has both a Last_alive and Last_dead date
#  if(length(Last_alive)>=1 & length(Last_dead)>=1) {
#If the plant was alive before it was dead and if it died before gopher was first observed - have to separate this if statement from the last because you can't ask if something is less than something else if never occured
#    if(Last_alive<Last_dead & Last_dead<Empty$Date_first_gopher_2021[target_row]) {
#Include plant
#      Empty$Exclude_2021[target_row]<-"Include"
#    } } #closes inner if statements
##Lastly, if plant died prior to gopher damage, list it as a natural death
#  if(Empty$Date_first_death_observed_2021[target_row]<Empty$Date_first_gopher_2021[target_row]) {
#    Empty$Exclude_2021[target_row]<-"Include"
#  } #Closes inner if statement
#} #Closes outer if statement
#Bolted and Flowered, yes=1 no=0
#to exclude plants that were erroneously marked as bolting, Jill added a condition that a plant needed to be censused as reproductive at least two times
ifelse((sum(sub$State=="Reproductive", na.rm=T)>=2 | sum(sub$Flower_number, na.rm=T)>=1 | sum(sub$Silique_number, na.rm=T)>=1), Empty$Bolted_2021[target_row]<-1, Empty$Bolted_2021[target_row]<-0)
#First, assign a 0 if it never had flowers or siliques, otherwise assign a 1
ifelse((sum(sub$Flower_number, na.rm=T)>=1 | sum(sub$Silique_number, na.rm=T)>=1), Empty$Flowered_2021[target_row]<-1, Empty$Flowered_2021[target_row]<-0)
####Subset reproductive data
Repro<-subset(sub, State=="Reproductive" & (Flower_number>=1 | Silique_number>=1)) #this filters out the rows where the plant was reproductive, but is missing flower or silique number
#Date_flowering (really this is the date that a plant is first observed to be reproductive)
if(nrow(Repro)>=1) {
Empty$Date_flowering_2021[target_row]<-Repro$Ordinal_date[1] }
#Stem_number_flowering, Flower_number_flowering, Silique_number_flowering, and Silique_length_flowering
if(nrow(Repro)>=1) {
Empty$Stem_number_flowering_2021[target_row]<-Repro$Stem_number[1] }
if(nrow(Repro)>=1) {
Empty$Flower_number_flowering_2021[target_row]<-Repro$Flower_number[1] }
if(nrow(Repro)>=1) {
Empty$Silique_number_flowering_2021[target_row]<-Repro$Silique_number[1] }
if(nrow(Repro)>=1) {
Empty$Silique_length_flowering_2021[target_row]<-Repro$Silique_length[1]
#<-Repro$Silique_length[1]
}
#Height1 at first flower
if(nrow(Repro)>=1) {
Empty$Height1_flowering_2021[target_row]<-Repro$Height1[1] }
########Note - this if statement contains summary commands for all peak-flowering related data
if(sum(Repro$Flower_number, na.rm=T)>=1) { #closes below
#Date_peak_flowering
max_fl<-max(Repro$Flower_number, na.rm=T)
Empty$Date_peak_flowering_2021[target_row]<-Repro$Ordinal_date[which(Repro$Flower_number==max_fl)][1]
#Flower_number_peak and Silique_number_peak and Stem_number_peak
Empty$Flower_number_peak_2021[target_row]<-max_fl
Empty$Silique_number_peak_2021[target_row]<-Repro$Silique_number[which(Repro$Flower_number==max_fl)][1]
Empty$Stem_number_peak_2021[target_row]<-Repro$Stem_number[which(Repro$Flower_number==max_fl)][1]
#Height1_peak
Empty$Height1_peak_2021[target_row]<-Repro$Height1[which(Repro$Flower_number==max_fl)][1]
} #Closes if statement
########Data for date of first SO - Note that this is the date of first SO observed after the last flower was observed
if(sum(Repro$Silique_number, na.rm=T)>=1) { #outer if statement
#Extract the rowname for the last day a flower was observed, and then the rownumber of that rowname within sub (note that the rownames in sub will come from its name within the master, long-format data file)
last_Fl<-rownames(tail(Repro[which(Repro$Flower_number>=1),], n=1))
##If there is a date of last flower, adjust the repro subset to reflect only data after the date of last flower
if(length(last_Fl)>0) { #inner if statement
##Row number of date of last flower in sub
last_Fl<-which(grepl(last_Fl, rownames(Repro)))
##Subset data to exclude censuses on or before the last flower was observed
Repro<-Repro[-c(1:last_Fl),]
} #Closes inner if statement
#Subset for censuses where a silique was observed (we have to do this second subset to exlude plants that became b or b, tco after flowering)
Repro<-subset(Repro, Silique_number>=1)
##Now estimate the date of first silique
Empty$Date_silique_2021[target_row]<-Repro$Ordinal_date[1]
#Stem_number_silique, Silique_number_silique, and Silique_length_silique
Empty$Stem_number_silique_2021[target_row]<-Repro$Stem_number[1]
Empty$Silique_number_silique_2021[target_row]<-Repro$Silique_number[1]
Empty$Silique_length_silique_2021[target_row]<-Repro$Silique_length[1]
#Height1_silique
Empty$Height1_silique_2021[target_row]<-Repro$Height1[1]
} #Closing bracket from outer if statement
#Mature_silique_number
Empty$Mature_silique_number_2021[target_row]<-sum(sub$Number_collected_siliques, na.rm=T)
#Failed_silique_number
Empty$Failed_silique_number_2021[target_row]<-sum(sub$Failed_silique_number, na.rm=T)
##Failed_silique_number - if statement needed because you can't take the maximum of a vector of NAs (when vegetative)
#if (sum(sub$Silique_number, na.rm=T)>=1) {
# Empty$Failed_silique_number[target_row]<-max(sub$Silique_number, na.rm=T)-sum(sub$Number_collected_siliques, na.rm=T)
##If the number of failed siliques is negative, set to zero
#if(Empty$Failed_silique_number[target_row]<0) {
# Empty$Failed_silique_number[target_row]<-0
#Mature_length_siliques - note that the column numbers have to be updated
Empty$Mature_length_siliques_2021[target_row]<-sum(sub[,c(
34,
36
)], na.rm=T)
} #closes inner if statement
check1 <-subset(Empty, PlantID=="E12208")
View(check1)
write.xlsx(Empty, "estess2021_2021_summary.xlsx", sheetName="Summary2021", colnames=TRUE, rownames=TRUE, keepNA=TRUE)
library(openxlsx)
write.xlsx(Empty, "estess2021_2021_summary.xlsx", sheetName="Summary2021", colnames=TRUE, rownames=TRUE, keepNA=TRUE)
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
# set working directory
setwd("~/OneDrive - University of Georgia/Inam_experiments/Herbivory_data/feeding_assay/Feeding_trial_spring2021")  #this is where you specify the folder where you have the data on your computer
#import data
Feeding_trial <- read.csv("Feeding_trialNov2021a.csv")
##Convert elevation to km (it helps with model convergence)
Feeding_trial$elev<-Feeding_trial$elevation/1000
Feeding_trial$mat_avgLAR<-Feeding_trial$mat_avgLAR/100
Feeding_trial$S_weight<-scale(Feeding_trial$ini_insect_weight.mcg.,center=TRUE, scale=TRUE)
Feeding_trial$time<-scale(Feeding_trial$elapsed_time,center=TRUE, scale=TRUE) #need to include elapsed time in the models
#Change treatment, genotype, batch to factor
Feeding_trial$mat_treat<-as.factor(Feeding_trial$mat_treat)
Feeding_trial$Exp_ID <-as.factor(Feeding_trial$Exp_ID)
Feeding_trial$genotype <-as.factor(Feeding_trial$genotype)
Feeding_trial$batch<-as.factor(Feeding_trial$batch)
Feeding_trial$mat_exp_ID <-as.factor(Feeding_trial$mat_exp_ID) #need to include this as random effect since multiple reps per mat line
#set colors
cols=c("#882255","#56B4E9")
#### LAR ####
#looking at LAR by elevation
data_LAR <- dplyr::select(Feeding_trial, LAR, elev, genotype, mat_treat, Exp_ID, time, batch,mat_exp_ID,S_weight,ini_insect_weight.mcg.,mat_avgLAR)
data_LAR <- drop_na(data_LAR,LAR) #this removes the rows without LAR values
ggplot(data_LAR, aes(x= LAR))+ geom_histogram(color="black", fill="white")
#The scatter is very high if you just plot the relationship with ggplot:
assayLAR =ggplot(data_LAR, aes(x= elev,y= LAR,shape= mat_treat, color= mat_treat,linetype= mat_treat))+geom_point(aes(shape= mat_treat),size=4)+scale_x_continuous("Source Elevation")+scale_y_continuous("Leaf area herbivorized")
assayLAR +theme_bw()+ theme_bw()+theme(text = element_text(size=15),axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.border = element_blank(),panel.grid.major =element_blank(), panel.grid.minor=element_blank(),legend.position = "bottom")+ scale_color_manual(values=c("#6699cc","#882255"))+
geom_smooth(method="lm",se=FALSE,  size=1,formula=y~x)+facet_wrap(~ mat_treat, scales="free_x")
# quadratic
assayLAR +theme_bw()+ theme_bw()+theme(text = element_text(size=15),axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.border = element_blank(),panel.grid.major =element_blank(), panel.grid.minor=element_blank(),legend.position = "bottom")+ scale_color_manual(values=c("#6699cc","#882255"))+
geom_smooth(method="lm",se=FALSE,  size=1,formula=y~poly(x,2))+facet_wrap(~ mat_treat, scales="free_x")
#this is the beta transformation, which transforms all values of 0 to a small value.
#Reference: Smithson M, Verkuilen J (2006). "A Better Lemon Squeezer? Maximum-Likelihood Regression with Beta-Distributed Dependent Variables." Psychological Methods, 11 (1), 54–71.
n<-nrow(data_LAR)
data_LAR $y_beta<- (data_LAR $LAR*(n-1) + 0.5)/n
hist(data_LAR $y_beta)
#You can check that you no longer have zero values (or values of 1, but I doubt that would be true with your data.
min(data_LAR $y_beta)
max(data_LAR $y_beta)
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat*ini_insect_weight.mcg.+ random(batch)+random(Exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
summary(LAR_Model)
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat*ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
summary(LAR_Model)
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat+ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev+mat_treat+ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
drop1(LAR_Model)
data_RGR <- dplyr::select(Feeding_trial, LAR, RGR, elev, genotype, mat_treat, Exp_ID, time, batch,mat_exp_ID,S_weight,ini_insect_weight.mcg., final_insect_weight,mat_avgLAR)
data_RGR <- drop_na(data_RGR,RGR) #this removes the rows without RGR values
data_RGR <- drop_na(data_RGR,LAR) #this removes the rows without LAR values
ggplot(data_RGR, aes(x= RGR))+ geom_histogram(color="black", fill="white")
#gamlss model
gamlss_rgr<- gamlss (formula=RGR~elev+mat_treat+random(batch)+random(genotype)+ random(mat_exp_ID), data=data_RGR,control = gamlss.control(n.cyc = 500))
#gamlss model
gamlss_rgr<- gamlss (formula=RGR~elev*mat_treat+random(batch)+random(genotype)+ random(mat_exp_ID), data=data_RGR,control = gamlss.control(n.cyc = 500))
summary(gamlss_rgr)
drop1(gamlss_rgr)
#gamlss model
gamlss_rgr<- gamlss (formula=RGR~elev+mat_treat+random(batch)+random(genotype)+ random(mat_exp_ID), data=data_RGR,control = gamlss.control(n.cyc = 500))
drop1(gamlss_rgr)
#lmer model
RGR <-lmer (RGR~ elev+mat_avgLAR +time
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
Anova(RGR,type="III")
hist(data_RGR$RGR)
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR)
#require packages
require(lme4) #for running linear mixed models
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR)
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
utils::install.packages("Matrix")
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
#require packages
require(lme4) #for running linear mixed models
install.packages("lme4")
install.packages(ggplot2) #for plotting
install.packages("ggplot2") #for plotting
install.packages("visreg") # for plotting
install.packages("car") # to run ANOVA on model output
install.packages("plyr") # for data wrangling
install.packages("dplyr") # for data wrangling
install.packages("tidyr") # for data wrangling
install.packages("effects") # for plotting
install.packages("emmeans") #for plotting
install.packages("glmmTMB") # for running survival model, have to load twice
install.packages("gamlss") # for running phenology model
install.packages("multcomp") #for pairwise comparisons
install.packages("vioplot") #for violin plots
require("ggplot2") #for plotting
require("visreg") # for plotting
require("car") # to run ANOVA on model output
require("plyr") # for data wrangling
require("dplyr") # for data wrangling
require("tidyr") # for data wrangling
require("effects") # for plotting
require("emmeans") #for plotting
require("glmmTMB") # for running survival model, have to load twice
require("gamlss") # for running phenology model
require("multcomp") #for pairwise comparisons
require("vioplot") #for violin plots
setwd("~/OneDrive - University of Georgia/Inam_experiments/Herbivory_data/feeding_assay/Feeding_trial_spring2021")  #this is where you specify the folder where you have the data on your computer
#import data
Feeding_trial <- read.csv("Feeding_trialNov2021a.csv")
##Convert elevation to km (it helps with model convergence)
Feeding_trial$elev<-Feeding_trial$elevation/1000
Feeding_trial$mat_avgLAR<-Feeding_trial$mat_avgLAR/100
Feeding_trial$S_weight<-scale(Feeding_trial$ini_insect_weight.mcg.,center=TRUE, scale=TRUE)
Feeding_trial$time<-scale(Feeding_trial$elapsed_time,center=TRUE, scale=TRUE) #need to include elapsed time in the models
#Change treatment, genotype, batch to factor
Feeding_trial$mat_treat<-as.factor(Feeding_trial$mat_treat)
Feeding_trial$Exp_ID <-as.factor(Feeding_trial$Exp_ID)
Feeding_trial$genotype <-as.factor(Feeding_trial$genotype)
Feeding_trial$batch<-as.factor(Feeding_trial$batch)
Feeding_trial$mat_exp_ID <-as.factor(Feeding_trial$mat_exp_ID) #need to include this as random effect since multiple reps per mat line
#set colors
cols=c("#882255","#56B4E9")
#LAR plots
plot(Feeding_trial$elev, Feeding_trial$LAR, xlab="elev", ylab="LAR")
plot(Feeding_trial$ini_insect_weight.mcg., Feeding_trial$LAR, xlab=" inital weight", ylab="LAR")
plot(Feeding_trial$final_insect_weight, Feeding_trial$LAR, xlab="final weight", ylab="LAR")
plot(Feeding_trial$final_insect_weight, Feeding_trial$ini_insect_weight.mcg., xlab="final weight", ylab="inital weight")
plot(Feeding_trial$time_minutes, Feeding_trial$LAR, xlab="Time", ylab="LAR")
plot(Feeding_trial$time_started, Feeding_trial$LAR, xlab="Time", ylab="LAR") #lower value indicates earlier in the day
plot(Feeding_trial$time_end, Feeding_trial$LAR, xlab="Time", ylab="LAR") #lower value indicates earlier in the day
data_LAR <- dplyr::select(Feeding_trial, LAR, elev, genotype, mat_treat, Exp_ID, time, batch,mat_exp_ID,S_weight,ini_insect_weight.mcg.,mat_avgLAR)
data_LAR <- drop_na(data_LAR,LAR) #this removes the rows without LAR values
ggplot(data_LAR, aes(x= LAR))+ geom_histogram(color="black", fill="white")
assayLAR =ggplot(data_LAR, aes(x= elev,y= LAR,shape= mat_treat, color= mat_treat,linetype= mat_treat))+geom_point(aes(shape= mat_treat),size=4)+scale_x_continuous("Source Elevation")+scale_y_continuous("Leaf area herbivorized")
assayLAR +theme_bw()+ theme_bw()+theme(text = element_text(size=15),axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.border = element_blank(),panel.grid.major =element_blank(), panel.grid.minor=element_blank(),legend.position = "bottom")+ scale_color_manual(values=c("#6699cc","#882255"))+
geom_smooth(method="lm",se=FALSE,  size=1,formula=y~x)+facet_wrap(~ mat_treat, scales="free_x")
data_RGR <- dplyr::select(Feeding_trial, LAR, RGR, elev, genotype, mat_treat, Exp_ID, time, batch,mat_exp_ID,S_weight,ini_insect_weight.mcg., final_insect_weight,mat_avgLAR)
data_RGR <- drop_na(data_RGR,RGR) #this removes the rows without RGR values
data_RGR <- drop_na(data_RGR,LAR) #this removes the rows without LAR values
ggplot(data_RGR, aes(x= RGR))+ geom_histogram(color="black", fill="white")
#gamlss model
gamlss_rgr<- gamlss (formula=RGR~elev+mat_treat+random(batch)+random(genotype)+ random(mat_exp_ID), data=data_RGR,control = gamlss.control(n.cyc = 500))
summary(gamlss_rgr)
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
require(lme4)
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
Anova(RGR,type="III")
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
#+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
#lmer model
RGR <-lmer (RGR~ elev*mat_treat+time
+(1|genotype)
+(1|batch)
+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
+(1|batch)
#+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
#lmer model
RGR <-lmer (RGR~ elev*mat_treat
+(1|genotype)
#+(1|batch)
#+(1|mat_exp_ID)
, data = data_RGR,
control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e7)))
Anova(RGR,type="III")
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat*ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
data_LAR <- dplyr::select(Feeding_trial, LAR, elev, genotype, mat_treat, Exp_ID, time, batch,mat_exp_ID,S_weight,ini_insect_weight.mcg.,mat_avgLAR)
data_LAR <- drop_na(data_LAR,LAR) #this removes the rows without LAR values
n<-nrow(data_LAR)
data_LAR $y_beta<- (data_LAR $LAR*(n-1) + 0.5)/n
hist(data_LAR $y_beta)
min(data_LAR $y_beta)
max(data_LAR $y_beta)
#Then, the analysis is:
library(betareg)
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat*ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
plot(LAR_Model)
summary(LAR_Model)
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev+mat_treat+ini_insect_weight.mcg.+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
plot(LAR_Model)
summary(LAR_Model)
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev+mat_treat+S_weight+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
plot(LAR_Model)
summary(LAR_Model)
drop1(LAR_Model)
## model
LAR_Model<- gamlss (formula= y_beta ~elev*mat_treat+S_weight+ random(batch)+random(mat_exp_ID) +random(genotype),family=BE(mu.link = "logit"), data=data_LAR,control = gamlss.control(n.cyc = 500))
plot(LAR_Model)
summary(LAR_Model)
drop1(LAR_Model)
plot(RGR)
