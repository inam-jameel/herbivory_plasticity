##Change the baselifor offspring
greenhouse $treatment <-factor(greenhouse $treatment, levels = c("Herbivory", "Na誰ve"))
##Change the baseline for maternal treatment
greenhouse $mat_treat <-factor(greenhouse $mat_treat, levels = c("Herbivory", "Na誰ve","Parent"))
greenhouse <- filter(greenhouse, mat_treat != "Parent")
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
greenhouse $S_elev<-scale(greenhouse $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
greenhouse $S_initdiam<-scale(greenhouse $ini_size,center=TRUE, scale=TRUE)
#This rescales source elevation from meters to km
greenhouse$elev_km<-greenhouse $elevation/1000
#for vegetative traits
foliar<-subset(greenhouse,SLA>0)
foliar $S_elev<-scale(foliar $elevation,center=TRUE, scale=TRUE)
#set colors
cols=c("#882255","#56B4E9")
#cols=c("#CC79A7","lightblue","gray")
cols2=c("#882255","#77DDAA")
##Exclude season 1 because we only have LAR data from that year and no plants reproduced
greenhouse_no1<-subset(greenhouse, Season!="1")
# retain only those traits to be included in the models;
colnames(greenhouse);
traitdat <- dplyr::select(greenhouse_no1,Season_survival, avg_leafnumber, avg_LAR, genotype, treatment, mat_treat, exp_ID, ini_size, block, elevation,elev_km,  Season,Date_flowering_exp, Height1_flowering,Mature_length_siliques,Reproduction, SLA, succulence,max_LAR, Mature_silique_number)
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
traitdat $Selev<-scale(traitdat $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
traitdat $S_initdiam<-scale(traitdat $ini_size,center=TRUE, scale=TRUE)
traitdat $sleaf<-scale(traitdat $avg_leafnumber,center=TRUE,scale=TRUE)
traitdat <- dplyr::select(greenhouse_no1,Season_survival, avg_leafnumber, avg_LAR2, genotype, treatment, mat_treat, exp_ID, ini_size, block, elevation,elev_km,  Season,Date_flowering_exp, Height1_flowering,Mature_length_siliques,Reproduction, SLA, succulence,max_LAR, Mature_silique_number)
traitdat <- dplyr::select(greenhouse_no1,Season_survival, avg_leafnumber, avg_LAR_2, genotype, treatment, mat_treat, exp_ID, ini_size, block, elevation,elev_km,  Season,Date_flowering_exp, Height1_flowering,Mature_length_siliques,Reproduction, SLA, succulence,max_LAR, Mature_silique_number)
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
traitdat $Selev<-scale(traitdat $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
traitdat $S_initdiam<-scale(traitdat $ini_size,center=TRUE, scale=TRUE)
traitdat $sleaf<-scale(traitdat $avg_leafnumber,center=TRUE,scale=TRUE)
#traitdat $sleaf<-scale(traitdat $avg_leafnumber,center=TRUE,scale=TRUE)
#traitdat $sLAR_max<-scale(traitdat $max_LAR,center=TRUE,scale=TRUE)
traitdat $sLAR<-scale(traitdat $avg_LAR_2,center=TRUE,scale=TRUE)
traitdat $sSLA<-scale(traitdat $SLA,center=TRUE,scale=TRUE)
#traitdat $sSUC<-scale(traitdat $succulence,center=TRUE,scale=TRUE)
traitdat $sFT<-scale(traitdat $Date_flowering_exp,center=TRUE,scale=TRUE)
traitdat $sheight<-scale(traitdat $Height1_flowering,center=TRUE,scale=TRUE)
head(traitdat)
repro_model_full <-glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+
treatment*mat_treat*sLAR+
#treatment*mat_treat*sSUC+#I(sSUC^2)*treatment+
treatment*mat_treat*sSLA+
#treatment*mat_treat*sleaf#+I(sleaf^2)
+(1|exp_ID)+(1|block)+(1|genotype),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
Anova(repro_model_full,type="III")
simulationOutput <- simulateResiduals(fittedModel= repro_model_full, plot = T, re.form = NULL)
testOutliers(simulationOutput, type="bootstrap")
sSLA_pred <- ggpredict(repro_model_full, terms = c("sSLA[all]", "treatment","mat_treat"), type = "re", interval="confidence")
SLA_reproduction_treatment <-plot(sSLA_pred, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Specific leaf area")+ scale_y_continuous("Probability of reproduction")+ ylim(0,1)
SLA_reproduction_treatment
repro <- emtrends(repro_model_full, specs = c("mat_treat","treatment"), var = "sSLA",type="response")
repro_table<- as.data.frame(summary(repro))[c("mat_treat",'treatment','sSLA.trend', 'SE')]
repro_table <- repro_table%>% mutate(
oddsratio = exp(sSLA.trend),
Lower95 = oddsratio * exp(-1.96*SE),
Upper95 = oddsratio * exp(1.96*SE))
sLAR_pred <- ggpredict(repro_model_full, terms = c("sLAR[all]","treatment","mat_treat"), type = "re", interval="confidence")
LAR_reproduction_treatment <-plot(sLAR_pred, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Leaf area removed (proportion)")+ scale_y_continuous("Probability of reproduction")+ ylim(0,1)
LAR_reproduction_treatment
traitdatRepro <- filter(traitdat, Reproduction == 1 )
#traitdatRepro $sLAR_max<-scale(traitdatRepro $max_LAR,center=TRUE,scale=TRUE)
traitdatRepro $sLAR<-scale(traitdatRepro $avg_LAR,center=TRUE,scale=TRUE)
traitdatRepro $sSLA<-scale(traitdatRepro $SLA,center=TRUE,scale=TRUE)
#traitdatRepro $sSUC<-scale(traitdatRepro $succulence,center=TRUE,scale=TRUE)
traitdatRepro $sFT<-scale(traitdatRepro $Date_flowering_exp,center=TRUE,scale=TRUE)
traitdatRepro $sheight<-scale(traitdatRepro $Height1_flowering,center=TRUE,scale=TRUE)
fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
Anova(fecund_modeltraits,type="III")
simulationOutput <- simulateResiduals(fittedModel= fecund_modeltraits, plot = T, re.form = NULL,allow.new.levels =TRUE)
#SLA
emtrends(fecund_modeltraits, specs = c("treatment"), var = "sSLA")
#Context dependent selection
standard_sSLA <- ggpredict(fecund_modeltraits, terms = c("sSLA[all]","treatment"), type = "re", interval="confidence")
SLA_fecundity <-plot(standard_sSLA, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Specific leaf area")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
emtrends(fecund_modeltraits, specs = c("treatment"), var = "sSLA")
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
library(DHARMa)
library(ggeffects)
library(ggpubr)
setwd("/Users/inam/Library/CloudStorage/OneDrive-UniversityofGeorgia/Inam_experiments/Herbivory_data/greenhouse/data")
#read in data
greenhouse <- read.csv("2gen_all_season_long_050324.csv",stringsAsFactors=T)
greenhouse <- filter(greenhouse, Include == "yes" )
sapply(greenhouse,class)
##Some  variables are being read as characters not factors. Let's fix that
greenhouse$block<-as.factor(greenhouse$block)
greenhouse$Season<-as.factor(greenhouse$Season)
greenhouse$exp_ID<-as.factor(greenhouse$exp_ID)
##Change the baseline for offspring
greenhouse $treatment <-factor(greenhouse $treatment, levels = c("Herbivory", "Na誰ve"))
##Change the baseline for maternal treatment
greenhouse $mat_treat <-factor(greenhouse $mat_treat, levels = c("Herbivory", "Na誰ve","Parent"))
#if want to remove the parent maternal environment
greenhouse <- filter(greenhouse, mat_treat != "Parent")
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
greenhouse $S_elev<-scale(greenhouse $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
greenhouse $S_initdiam<-scale(greenhouse $ini_size,center=TRUE, scale=TRUE)
#This rescales source elevation from meters to km
greenhouse$elev_km<-greenhouse $elevation/1000
#for vegetative traits
foliar<-subset(greenhouse,SLA>0)
foliar $S_elev<-scale(foliar $elevation,center=TRUE, scale=TRUE)
#set colors
cols=c("#882255","#56B4E9")
LAR_data<- greenhouse %>% pivot_longer(cols=c("LAR_1","LAR_2"
#,"LAR_3"
),
names_to='census',
values_to='LAR')
LAR_data <- dplyr::select(LAR_data, LAR, elevation, genotype, mat_treat, treatment, block, exp_ID, ini_size, S_initdiam, elev_km, S_elev,census, Season)
LAR_data$census[LAR_data$census == "LAR_1"] <- "1"
LAR_data$census[LAR_data$census == "LAR_2"] <- "2"
LAR_data $census <-as.factor(LAR_data $census)
LAR_data $Season <-as.factor(LAR_data $Season)
LAR_data$censusSeason <- interaction(LAR_data$census, LAR_data$Season)
LAR_data$LAR_prop<-LAR_data $LAR/100
hist(LAR_data$LAR_prop)
LAR_data <- drop_na(LAR_data,LAR_prop)
n<-nrow(LAR_data)
LAR_data $y_beta<- (LAR_data $LAR_prop*(n-1) + 0.5)/n
hist(LAR_data $y_beta)
min(LAR_data $y_beta)
max(LAR_data $y_beta)
#Box_plot
LAR_box <-ggplot(LAR_data, aes(x = treatment, y = LAR_prop, fill = treatment)) +
geom_boxplot(outlier.shape = NA) +xlab("Offsping herbivore treatment")+ scale_y_continuous("Leaf area removed by herbivores (proportion)") +
geom_point(pch = 21, size = .5,position = position_jitterdodge(0.3))
LAR_box + theme_classic() + theme(text = element_text(size=10),axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"), panel.border = element_blank(), panel.grid.major =element_blank(),
panel.grid.minor=element_blank(),legend.position = "top")+ scale_x_discrete(labels=c("Herbivory", "Na誰ve")) +  scale_fill_manual(values = cols, name = "Offspring herbivory treatment", labels = c("Herbivory","Na誰ve"))+facet_grid(~Season+mat_treat)
## model
LAR_Model<- gamlss (formula= y_beta ~S_elev*treatment*mat_treat*Season+ random(censusSeason) + random(exp_ID)+ random(block)+random(genotype),family=BE(mu.link = "logit"), data=LAR_data,control = gamlss.control(n.cyc = 500))
plot(LAR_Model)
summary(LAR_Model)
newdf2 <- LAR_data %>%
mutate(fit.m = predict(LAR_Model, se.fit=FALSE),
resid = residuals(LAR_Model))
##Convert coefficients to probabilities
newdf2 $predicted<-1/(1+exp(-(newdf2 $fit.m)))
newdf2 $resid_trans<-1/(1+exp(-(newdf2 $resid)))
#cline, plotting predicted data
damage_cline= ggplot(newdf2, aes(x= S_elev,y= predicted, group= treatment,
colour= treatment))+geom_point(pch = 20) + scale_y_continuous("Leaf area removed by herbivores (proportion)")+ scale_x_continuous("Source elevation")   + theme_classic() + facet_grid(mat_treat~ Season) + theme(axis.title.y = element_text(size=10, colour = "black")) +theme(text = element_text(size=10),axis.line.x = element_line(colour = "black"),axis.line.y = element_line(colour = "black"), panel.border = element_blank(), panel.grid.major =element_blank(),panel.grid.minor=element_blank(),legend.position = "Top")+geom_smooth(method = "glm", method.args = list(family = "quasibinomial"),  se = FALSE) +scale_colour_manual(values = cols, name = "Water availability", labels = c("Restricted","Supplemental"))
damage_cline
#Subsets of models for drop 1
LAR_Model_two<- gamlss (formula= y_beta ~S_elev*treatment+S_elev*mat_treat+ treatment* mat_treat+Season*treatment+Season*mat_treat+S_elev*Season+ random(censusSeason) + random(exp_ID)+ random(block)+random(genotype),family=BE(mu.link = "logit"), data=LAR_data,control = gamlss.control(n.cyc = 500))
drop1(LAR_Model_two)
#Subsets of models for drop 1
LAR_Model_three<- gamlss (formula= y_beta ~S_elev*treatment*mat_treat+S_elev*treatment*Season+S_elev* mat_treat*Season+ treatment* mat_treat*Season+ random(censusSeason) + random(exp_ID)+ random(block)+random(genotype),family=BE(mu.link = "logit"), data=LAR_data,control = gamlss.control(n.cyc = 500))
drop1(LAR_Model_three)
foliar<-subset(greenhouse,SLA>0)
foliar $S_elev<-scale(foliar $elevation,center=TRUE, scale=TRUE)
hist(foliar$SLA)
sla_model <- glmmTMB(SLA ~ treatment*mat_treat*S_elev+Season+(1|exp_ID)+(1|genotype)+(1|block), data = foliar, family= lognormal(link="log"))
Anova(sla_model, type = "III") #
simulationOutput <- simulateResiduals(fittedModel= sla_model, plot = T, re.form = NULL,allow.new.levels =T)
sla_model_no_plantID <- glmmTMB(SLA ~ treatment*mat_treat*S_elev+Season+(1|genotype)+(1|block), data = foliar, family= lognormal(link="log"))
sla_model_no_genotype <- glmmTMB(SLA ~ treatment*mat_treat*S_elev+Season+(1|exp_ID)+(1|block), data = foliar, family= lognormal(link="log"))
sla_model_no_block <- glmmTMB(SLA ~ treatment*mat_treat*S_elev+Season+(1|exp_ID)+(1|genotype), data = foliar, family= lognormal(link="log"))
anova(sla_model,sla_model_no_plantID)
anova(sla_model,sla_model_no_genotype)
anova(sla_model,sla_model_no_block)
FT_model<-glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
##To enable simulate residuals to work, we have to exclude plants that did not flower
flowering<-subset(greenhouse, Date_flowering!="NA")
hist(flowering$Date_flowering_exp)
FT_model<-glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
Anova(FT_model, type = "III") #
simulationOutput <- simulateResiduals(fittedModel= FT_model, plot = T, re.form = NULL,allow.new.levels =T)
FT_model_1<-glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=Gamma(link="sqrt"))
Anova(FT_model_1, type = "III") #
simulationOutput <- simulateResiduals(fittedModel= FT_model_1, plot = T, re.form = NULL,allow.new.levels =T)
FT_model_no_plantID <- glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|genotype)+(1|block),data= flowering,family=lognormal(link="log"))
FT_model_no_genotype <- glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
FT_model_no_block <- glmmTMB(Date_flowering_exp ~ S_elev*treatment*mat_treat*Season+(1|genotype)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
anova(FT_model,FT_model_no_plantID)
anova(FT_model,FT_model_no_genotype)
anova(FT_model,FT_model_no_block)
height_model<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering)#,family=lognormal(link="log"))
hist(flowering$Height1_flowering)
Anova(height_model, type = "III") #
#Use the DHARMa package to examine the residuals, which are reasonable
simulationOutput <- simulateResiduals(fittedModel= height_model, plot = T, re.form = NULL)
height_model<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering),family=lognormal(link="log"))
height_model<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
hist(flowering$Height1_flowering)
Anova(height_model, type = "III") #
#Use the DHARMa package to examine the residuals, which are reasonable
simulationOutput <- simulateResiduals(fittedModel= height_model, plot = T, re.form = NULL)
max_height_nogeno<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
max_height_noblock<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
max_height_nopid<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block),data= flowering,family=lognormal(link="log"))
anova(max_height,max_height_nogeno)
anova(height_model,max_height_nogeno)
anova(height_model,max_height_noblock)
anova(height_model,max_height_nogeno)
anova(height_model,max_height_nopid)
Anova(height_model, type = "III") #
height_model<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
Anova(height_model, type = "III") #
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
library(DHARMa)
library(ggeffects)
library(ggpubr)
setwd("/Users/inam/Library/CloudStorage/OneDrive-UniversityofGeorgia/Inam_experiments/Herbivory_data/greenhouse/data")
#read in data
greenhouse <- read.csv("2gen_all_season_long_050324.csv",stringsAsFactors=T)
greenhouse <- filter(greenhouse, Include == "yes" )
sapply(greenhouse,class)
##Some  variables are being read as characters not factors. Let's fix that
greenhouse$block<-as.factor(greenhouse$block)
greenhouse$Season<-as.factor(greenhouse$Season)
greenhouse$exp_ID<-as.factor(greenhouse$exp_ID)
##Change the baseline for offspring
greenhouse $treatment <-factor(greenhouse $treatment, levels = c("Herbivory", "Na誰ve"))
##Change the baseline for maternal treatment
greenhouse $mat_treat <-factor(greenhouse $mat_treat, levels = c("Herbivory", "Na誰ve","Parent"))
#if want to remove the parent maternal environment
greenhouse <- filter(greenhouse, mat_treat != "Parent")
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
greenhouse $S_elev<-scale(greenhouse $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
greenhouse $S_initdiam<-scale(greenhouse $ini_size,center=TRUE, scale=TRUE)
#This rescales source elevation from meters to km
greenhouse$elev_km<-greenhouse $elevation/1000
#for vegetative traits
foliar<-subset(greenhouse,SLA>0)
foliar $S_elev<-scale(foliar $elevation,center=TRUE, scale=TRUE)
#set colors
cols=c("#882255","#56B4E9")
LAR_data<- greenhouse %>% pivot_longer(cols=c("LAR_1","LAR_2"
#,"LAR_3"
),
names_to='census',
values_to='LAR')
##To enable simulate residuals to work, we have to exclude plants that did not flower
flowering<-subset(greenhouse, Date_flowering!="NA")
hist(flowering$Date_flowering_exp)
height_model<-glmmTMB(Height1_flowering ~ S_elev*treatment*mat_treat+Season+(1|genotype)+(1|block)+(1| exp_ID),data= flowering,family=lognormal(link="log"))
hist(flowering$Height1_flowering)
Anova(height_model, type = "III") #
prob_repro <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID) + (1|block)+(1|genotype), data= greenhouse,family=binomial(link="logit"))
Anova(prob_repro, type="III")
#*******************************************************************************
####  Probability of reproduction #####
#*******************************************************************************
greenhouse2 <- filter(greenhouse, Season != "1")
prob_repro <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID) + (1|block)+(1|genotype), data= greenhouse2,family=binomial(link="logit"))
Anova(prob_repro, type="III")
prob_repro <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID) + (1|block)+(1|genotype), data= greenhouse2,family=binomial(link="logit"))
prob_repro_nogeno <-glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID) + (1|block), data= greenhouse2,family=binomial(link="logit"))
prob_repro_nopid <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+ (1|block)+(1|genotype), data= greenhouse2,family=binomial(link="logit"))
prob_repro_block <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID)+(1|genotype), data= greenhouse2,family=binomial(link="logit"))
anova(prob_repro,prob_repro_nogeno)
anova(prob_repro,prob_repro_nopid)
anova(prob_repro,prob_repro_noblock)
anova(prob_repro,prob_repro_block)
#*******************************************************************************
####  Fecundity #####
#*******************************************************************************
#*
repro<-subset(greenhouse, Reproduction=="1")
fecundity <- glmmTMB(Mature_length_siliques ~S_initdiam+treatment*mat_treat* S_elev+Season+(1|exp_ID) + (1|block)+(1|genotype), data= repro,family=Gamma(link="log"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
fecundity <- glmmTMB(Mature_length_siliques ~S_initdiam+treatment*mat_treat* S_elev+Season+(1|exp_ID) + (1|block)+(1|genotype), data= repro,family=Gamma(link="log"))
Anova(fecundity,type="III")
fecundity_nogeno <-glmmTMB(Mature_length_siliques ~S_initdiam+treatment*mat_treat* S_elev+Season+(1|exp_ID) + (1|block), data= repro,family=Gamma(link="log"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
fecundity_nopid <- glmmTMB(Mature_length_siliques ~S_initdiam+treatment*mat_treat* S_elev+Season + (1|block)+(1|genotype), data= repro,family=Gamma(link="log"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
fecundity_block <- glmmTMB(Mature_length_siliques ~S_initdiam+treatment*mat_treat* S_elev+Season+(1|exp_ID) +(1|genotype), data= repro,family=Gamma(link="log"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
anova(fecundity,fecundity_nogeno)
anova(fecundity,fecundity_nopid)
anova(fecundity,fecundity_block)
##Exclude season 1 because we only have LAR data from that year and no plants reproduced
greenhouse_no1<-subset(greenhouse, Season!="1")
# retain only those traits to be included in the models;
colnames(greenhouse);
traitdat <- dplyr::select(greenhouse_no1,Season_survival, avg_leafnumber, avg_LAR_2, genotype, treatment, mat_treat, exp_ID, ini_size, block, elevation,elev_km,  Season,Date_flowering_exp, Height1_flowering,Mature_length_siliques,Reproduction, SLA, succulence,max_LAR, Mature_silique_number)
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
traitdat $Selev<-scale(traitdat $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
traitdat $S_initdiam<-scale(traitdat $ini_size,center=TRUE, scale=TRUE)
## Many quantitative genetic models have convergence issues (or run very slowly) using raw data because traits and fitness components are measured on different scales. For example, phenology could be measured in days, whereas egg or seed mass is measured in mg. It is generally useful to standardize traits to a mean of 0 and standard deviation of 1. Below is code for standardizing flowering phenology (the resulting standardized variable is sFP, for standardized flowering phenology) and other phenotypic traits. For leaf damage, the standardized variable is called sLAR (which uses our field abbreviation of LAR for leaf area removed by herbivores)
#traitdat $sleaf<-scale(traitdat $avg_leafnumber,center=TRUE,scale=TRUE)
#traitdat $sLAR_max<-scale(traitdat $max_LAR,center=TRUE,scale=TRUE)
traitdat $sLAR<-scale(traitdat $avg_LAR_2,center=TRUE,scale=TRUE)
traitdat $sSLA<-scale(traitdat $SLA,center=TRUE,scale=TRUE)
#traitdat $sSUC<-scale(traitdat $succulence,center=TRUE,scale=TRUE)
traitdat $sFT<-scale(traitdat $Date_flowering_exp,center=TRUE,scale=TRUE)
traitdat $sheight<-scale(traitdat $Height1_flowering,center=TRUE,scale=TRUE)
head(traitdat)
repro_model_full <-glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+
#treatment*mat_treat*sLAR+
#treatment*mat_treat*sSUC+#I(sSUC^2)*treatment+
treatment*mat_treat*sSLA+
#treatment*mat_treat*sleaf#+I(sleaf^2)
+(1|exp_ID)+(1|block)+(1|genotype),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
Anova(repro_model_full,type="III")
simulationOutput <- simulateResiduals(fittedModel= repro_model_full, plot = T, re.form = NULL)
sSLA_pred <- ggpredict(repro_model_full, terms = c("sSLA[all]", "treatment","mat_treat"), type = "re", interval="confidence")
SLA_reproduction_treatment <-plot(sSLA_pred, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Specific leaf area")+ scale_y_continuous("Probability of reproduction")+ ylim(0,1)
anova(fecundity,fecundity_nogeno)
anova(fecundity,fecundity_nopid)
anova(fecundity,fecundity_block)
repro_model_full <-glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+
treatment*mat_treat*sLAR+
#treatment*mat_treat*sSUC+#I(sSUC^2)*treatment+
treatment*mat_treat*sSLA+
#treatment*mat_treat*sleaf#+I(sleaf^2)
+(1|exp_ID)+(1|block)+(1|genotype),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
Anova(repro_model_full,type="III")
repro_model_full_nogeno <-glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+ treatment*mat_treat*sLAR+ treatment*mat_treat*sSLA+(1|exp_ID)+(1|block),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
repro_model_full_nopid <- glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+ treatment*mat_treat*sLAR+ treatment*mat_treat*sSLA+(1|block)+(1|genotype),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
repro_model_full_block <- glmmTMB(Reproduction~S_initdiam+treatment*mat_treat*Season+ treatment*mat_treat*sLAR+ treatment*mat_treat*sSLA+(1|exp_ID)+(1|genotype),data=traitdat,family=binomial(link="logit"),control=glmmTMBControl(optimizer=optim, optArgs=list(method="BFGS")))
anova(repro_model_full,repro_model_full_nogeno)
anova(repro_model_full,repro_model_full_nopid)
anova(repro_model_full,repro_model_full_block)
traitdatRepro <- filter(traitdat, Reproduction == 1 )
#traitdatRepro $sLAR_max<-scale(traitdatRepro $max_LAR,center=TRUE,scale=TRUE)
traitdatRepro $sLAR<-scale(traitdatRepro $avg_LAR,center=TRUE,scale=TRUE)
traitdatRepro $sSLA<-scale(traitdatRepro $SLA,center=TRUE,scale=TRUE)
#traitdatRepro $sSUC<-scale(traitdatRepro $succulence,center=TRUE,scale=TRUE)
traitdatRepro $sFT<-scale(traitdatRepro $Date_flowering_exp,center=TRUE,scale=TRUE)
traitdatRepro $sheight<-scale(traitdatRepro $Height1_flowering,center=TRUE,scale=TRUE)
fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
Anova(fecund_modeltraits,type="III")
fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+ (1|exp_ID)
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+ (1|exp_ID)+
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
Anova(fecund_modeltraits,type="III")
fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+ (1|exp_ID)+
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
Anova(fecund_modeltraits,type="III")
fecund_modeltraits_nogeno <-fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+ (1|exp_ID)+
(1|block),data=traitdatRepro,family=Gamma(link="log"))
fecund_modeltraits_nopid <- fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+
(1|block)+(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
fecund_modeltraits_block <- fecund_modeltraits <-glmmTMB(Mature_length_siliques~ S_initdiam+treatment*mat_treat*Season +
treatment*mat_treat* sSLA+
treatment*mat_treat* sLAR+
sFT*treatment*mat_treat+
sheight*treatment*mat_treat+ (1|exp_ID)+
(1|genotype),data=traitdatRepro,family=Gamma(link="log"))
anova(fecund_modeltraits,fecund_modeltraits_nogeno)
anova(fecund_modeltraits,fecund_modeltraits_nopid)
anova(fecund_modeltraits,fecund_modeltraits_block)
anova(fecund_modeltraits,fecund_modeltraits_nogeno)
anova(fecund_modeltraits,fecund_modeltraits_nopid)
LAR_fecundity <-plot(standard_sLAR, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Leaf area removed (proportion)")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
#height
standard_height <- ggpredict(fecund_modeltraits, terms = c("sheight[all]","treatment","mat_treat"), type = "re", interval="confidence")
height_fecundity <-plot(standard_height, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Tallest stem at flowering")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
emtrends(fecund_modeltraits, var = "sheight")
height_fecundity <-plot(standard_height, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="none")+scale_x_continuous("Tallest stem at flowering")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
height_fecundity
height_fecundity <-plot(standard_height, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="TOP")+scale_x_continuous("Tallest stem at flowering")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
height_fecundity
height_fecundity <-plot(standard_height, show_data=TRUE, show_title =FALSE, show_legend=TRUE, colors = cols, facet=FALSE)+theme_classic()+theme(legend.position="bottom")+scale_x_continuous("Tallest stem at flowering")+ scale_y_continuous("Fecundity (Summed length of siliques)")+ ylim(0,2000)
height_fecundity
# remove objects and clear workspace
rm(list = ls(all=TRUE))
#require packages
require(lme4) #for running linear mixed models
require(ggplot2) #for plotting
require(visreg) # for plotting
require(car) # to run ANOVA on model output
require(plyr) # for data wrangling
require(dplyr) # for data wrangling
require(tidyr) # for data wrangling
require(effects) # for plotting
require(emmeans) #for plotting
require(glmmTMB) # for running survival model, have to load twice
require(gamlss) # for running phenology model
require(broom.mixed) #for making tables
require(multcomp) #for pairwise comparisons
require(vioplot) #for violin plots
library(DHARMa)
library(ggeffects)
library(ggpubr)
setwd("/Users/inam/Library/CloudStorage/OneDrive-UniversityofGeorgia/Inam_experiments/Herbivory_data/greenhouse/data")
#this is where you specify the folder where you have the data on your computer
#read in data
greenhouse <- read.csv("2gen_all_season_long_050324.csv",stringsAsFactors=T)
greenhouse <- filter(greenhouse, Include == "yes" )
sapply(greenhouse,class)
##Some  variables are being read as characters not factors. Let's fix that
greenhouse$block<-as.factor(greenhouse$block)
greenhouse$Season<-as.factor(greenhouse$Season)
greenhouse$exp_ID<-as.factor(greenhouse$exp_ID)
##Change the baseline for offspring
greenhouse $treatment <-factor(greenhouse $treatment, levels = c("Herbivory", "Na誰ve"))
##Change the baseline for maternal treatment
greenhouse $mat_treat <-factor(greenhouse $mat_treat, levels = c("Herbivory", "Na誰ve","Parent"))
#if want to remove the parent maternal environment
greenhouse <- filter(greenhouse, mat_treat != "Parent")
##This standardizes source elevation to a mean of 0 and standard deviation of 1, which is often necessary for model convergence
greenhouse $S_elev<-scale(greenhouse $elevation,center=TRUE, scale=TRUE)
##This standardizes initial plant size (measured as diameter in mm)  to a mean of 0 and standard deviation of 1 for use as a covariate in fitness models
greenhouse $S_initdiam<-scale(greenhouse $ini_size,center=TRUE, scale=TRUE)
#This rescales source elevation from meters to km
greenhouse$elev_km<-greenhouse $elevation/1000
#for vegetative traits
foliar<-subset(greenhouse,SLA>0)
foliar $S_elev<-scale(foliar $elevation,center=TRUE, scale=TRUE)
#set colors
cols=c("#882255","#56B4E9")
#cols=c("#CC79A7","lightblue","gray")
#c
#*******************************************************************************
####  Probability of reproduction #####
#*******************************************************************************
greenhouse2 <- filter(greenhouse, Season != "1")
prob_repro <- glmmTMB(Reproduction ~S_initdiam+ treatment * S_elev *mat_treat +Season+(1|exp_ID) + (1|block)+(1|genotype), data= greenhouse2,family=binomial(link="logit"))
Anova(prob_repro, type="III")
simulationOutput <- simulateResiduals(fittedModel= prob_repro, plot = T, re.form = NULL,allow.new.levels =TRUE)
repro<-emmeans(prob_repro, ~ treatment:mat_treat, type="response", adjust = "sidak")
cld(repro, details=TRUE)
LAR_data<- greenhouse %>% pivot_longer(cols=c("LAR_1","LAR_2"
#,"LAR_3"
),
names_to='census',
values_to='LAR')
LAR_data<- greenhouse %>% pivot_longer(cols=c("LAR_1","LAR_2"
,"LAR_3"
),
names_to='census',
values_to='LAR')
LAR_data <- dplyr::select(LAR_data, LAR, elevation, genotype, mat_treat, treatment, block, exp_ID, ini_size, S_initdiam, elev_km, S_elev,census, Season)
LAR_data$census[LAR_data$census == "LAR_1"] <- "1"
LAR_data$census[LAR_data$census == "LAR_2"] <- "2"
LAR_data$census[LAR_data$census == "LAR_3"] <- "3"
LAR_data $census <-as.factor(LAR_data $census)
LAR_data $Season <-as.factor(LAR_data $Season)
LAR_data$censusSeason <- interaction(LAR_data$census, LAR_data$Season)
LAR_data$LAR_prop<-LAR_data $LAR/100
hist(LAR_data$LAR_prop)
LAR_data <- drop_na(LAR_data,LAR_prop)
n<-nrow(LAR_data)
LAR_data $y_beta<- (LAR_data $LAR_prop*(n-1) + 0.5)/n
hist(LAR_data $y_beta)
min(LAR_data $y_beta)
max(LAR_data $y_beta)
## model
LAR_Model<- gamlss (formula= y_beta ~S_elev*treatment*mat_treat*Season+ random(censusSeason) + random(exp_ID)+ random(block)+random(genotype),family=BE(mu.link = "logit"), data=LAR_data,control = gamlss.control(n.cyc = 500))
LAR <-emmeans(LAR_Model, ~ treatment*mat_treat*Season, type="response", adjust = "sidak")
